name: Deploy via FTP with Database Migrations

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy-service:
    name: 📦 Deploy service to FTP
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      fullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🔧 Install GitVersion
        uses: gittools/actions/gitversion/setup@v4.0.1
        with:
          versionSpec: "6.x"

      - name: 🏷️ Determine Version Number
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4.0.1

      - name: 💾 Cache Composer Dependencies
        uses: actions/cache@v4
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      - name: 📚 Install PHP Dependencies
        uses: "php-actions/composer@v6"
        with:
          php_extensions: sockets
          dev: no
          progress: yes
          working_dir: "./Src/"

      - name: 🔒 Create .htaccess Security File
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "Deny from all" >> .htaccess
 
      
      - name: 🔑 Generate AppVeyor Configuration
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> appVeyor.secrets.php
          echo "\$appVeyorKey = \"${{ secrets.APPVEYOR_KEY }}\";" >> appVeyor.secrets.php

      - name: 🔑 Generate Codacy Configuration
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> codacy.secrets.php
          echo "\$codacyApiToken = \"${{ secrets.CODACY_API_TOKEN }}\";" >> codacy.secrets.php

      - name: 🔑 Generate Codecov Configuration
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> codecov.secrets.php
          echo "\$codecovApiToken = \"${{ secrets.CODECOV_API_TOKEN }}\";" >> codecov.secrets.php

      - name: 🔑 Generate GitHub App Configuration
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> gitHubApp.secrets.php
          echo "\$gitHubUserToken        = \"${{ secrets.USER_TOKEN }}\";" >> gitHubApp.secrets.php
          echo "\$gitHubAppId            = \"${{ secrets.APP_ID }}\";" >> gitHubApp.secrets.php
          echo "\$gitHubAppPrivateKey    = \"${{ secrets.APP_PRIVATE_KEY}}\";" >> gitHubApp.secrets.php
          echo "\$gitHubWebhookEndpoint  = \"${{ secrets.WEBHOOK_ENDPOINT }}\";" >> gitHubApp.secrets.php
          echo "\$gitHubWebhookSignature = \"${{ secrets.WEBHOOK_SIGNATURE }}\";" >> gitHubApp.secrets.php

      - name: 🔑 Generate HealthChecksIo Configuration
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> healthChecksIo.secrets.php
          echo "\$healthChecksIoBranches      = \"${{ secrets.HEALTHCHECKSIO_BRANCHES }}\";" >> healthChecksIo.secrets.php
          echo "\$healthChecksIoIssues        = \"${{ secrets.HEALTHCHECKSIO_ISSUES }}\";" >> healthChecksIo.secrets.php
          echo "\$healthChecksIoComments      = \"${{ secrets.HEALTHCHECKSIO_COMMENTS }}\";" >> healthChecksIo.secrets.php
          echo "\$healthChecksIoInstallations = \"${{ secrets.HEALTHCHECKSIO_INSTALLATIONS }}\";" >> healthChecksIo.secrets.php
          echo "\$healthChecksIoPushes        = \"${{ secrets.HEALTHCHECKSIO_PUSHES }}\";" >> healthChecksIo.secrets.php
          echo "\$healthChecksIoPullRequests  = \"${{ secrets.HEALTHCHECKSIO_PULL_REQUESTS }}\";" >> healthChecksIo.secrets.php
          echo "\$healthChecksIoRepositories  = \"${{ secrets.HEALTHCHECKSIO_REPOSITORIES }}\";" >> healthChecksIo.secrets.php
          echo "\$healthChecksIoSignature     = \"${{ secrets.HEALTHCHECKSIO_SIGNATURE }}\";" >> healthChecksIo.secrets.php

      - name: 🔑 Generate Logger Configuration
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> logger.secrets.php
          echo "\$loggerUrl      = \"${{ secrets.LOGGER_URL }}\";" >> logger.secrets.php
          echo "\$loggerApiKey   = \"${{ secrets.LOGGER_APIKEY }}\";" >> logger.secrets.php
          echo "\$loggerApiToken = \"${{ secrets.LOGGER_APITOKEN }}\";" >> logger.secrets.php
      
      - name: 🔑 Generate MySQL Configuration
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> mySql.secrets.php
          echo "\$mySqlHost     = \"127.0.0.1\";" >> mySql.secrets.php
          echo "\$mySqlUser     = \"${{ secrets.MYSQL_USER }}\";" >> mySql.secrets.php
          echo "\$mySqlPassword = \"${{ secrets.MYSQL_PASSWORD }}\";" >> mySql.secrets.php
          echo "\$mySqlDatabase = \"${{ secrets.MYSQL_DATABASE }}\";" >> mySql.secrets.php

      - name: 🔑 Generate RabbitMQ Configuration
        run: |
          SECRETS_CONTEXT='${{ toJson(secrets) }}'
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> rabbitMq.secrets.php
          rabbitmq_values=$(echo "$SECRETS_CONTEXT" | jq -S '.' | jq -r 'to_entries | map(select(.key | startswith("RABBITMQ_"))) | .[].value')
          
          for value in $rabbitmq_values; do
              value_final=$(echo $value | sed 's/\\n/ /g')
              echo "\$rabbitMqConnectionStrings[] = \"$value_final\";" >> rabbitMq.secrets.php
          done

      - name: 📝 Create Version File for API
        run: |
          cd Src       
          echo ${{ env.fullSemVer }} > version.txt

      - name: 🔐 Create lock file
        run: |
          mkdir -p Lock
          date +"%Y-%m-%d %H:%M:%S" > Lock/updating.lock

      - name: ⬆️ Upload updating.lock
        uses: sebastianpopp/ftp-action@releases/v2
        with:
          host: ${{ secrets.FTP_SERVER }}
          user: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          localDir: "Lock"
          remoteDir: "/"

      - name: 📤 Upload service via FTP
        uses: sebastianpopp/ftp-action@releases/v2
        with:
          host: ${{ secrets.FTP_SERVER }}
          user: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          localDir: "Src"
          remoteDir: "/"          

      - name: 🚀 Create release file
        run: |
          rm -f Lock/updating.lock
          date +"%Y-%m-%d %H:%M:%S" > Lock/updating.release

      - name: ⬆️ Upload updating.release
        uses: sebastianpopp/ftp-action@releases/v2
        with:
          host: ${{ secrets.FTP_SERVER }}
          user: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          localDir: "Lock"
          remoteDir: "/"

  deploy-api:
    name: 🚀 Deploy API to FTP
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 

      - name: 📋 Copy commands.json to API
        run: cp Src/config/commands.json Src/api/v1/
      
      - name: 📤 Upload Application via FTP
        uses: sebastianpopp/ftp-action@releases/v2
        with:
          host: ${{ secrets.FTP_SERVER }}
          user: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          localDir: "Src/api/"
          remoteDir: "/"
  
  create_release:
    name: 📢 Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
    needs: [deploy-service, deploy-api]
    env:
      fullSemVer: ${{ needs.deploy-service.outputs.fullSemVer }}
    steps:
      - name: 🏷️ Create and Publish Release
        uses: ncipollo/release-action@v1.19.1
        with:
          skipIfReleaseExists: true
          allowUpdates: false
          draft: false
          makeLatest: true
          tag: v${{ env.fullSemVer }}
          name: Release v${{ env.fullSemVer }}
          generateReleaseNotes: true
          body: Release ${{ env.fullSemVer }} of ${{ github.repository }}
