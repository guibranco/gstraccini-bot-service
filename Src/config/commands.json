[
    {
        "command": "add project",
        "description": "Adds a project to the solution file (only for **.NET** projects).",
        "parameters": [
            {
                "parameter": "projectPath",
                "description": "The project path to be added to the solution file.",
                "required": true
            }
        ],
        "requiresPullRequestOpen": true
    },
    {
        "command": "appveyor build",
        "description": "Runs the [AppVeyor](https://ci.appveyor.com) build for the target commit and/or pull request.",
        "parameters": [
            {
                "parameter": "type",
                "description": "Specifies if it should trigger a build in a `commit` or `pull request`.",
                "required": true
            }
        ],
        "requiresPullRequestOpen": true
    },
    {
        "command": "appveyor bump version",
        "description": "Bumps the CI version in [AppVeyor](https://ci.appveyor.com).",
        "parameters": [
            {
                "parameter": "component",
                "description": "The semver component to bump (major, minor, or build).",
                "required": true
            }
        ],
        "requiresPullRequestOpen": true
    },
    {
        "command": "appveyor register",
        "description": "Registers the repository in [AppVeyor](https://ci.appveyor.com).",
        "requiresPullRequestOpen": true
    },
    {
        "command": "appveyor reset",
        "description": "Resets the [AppVeyor](https://ci.appveyor.com) build number for the target repository.",
        "requiresPullRequestOpen": true
    },
    {
        "command": "bump version",
        "description": "Bumps the [.NET version](https://dotnet.microsoft.com/en-us/platform/support/policy/dotnet-core) in `.csproj` files.",
        "parameters": [
            {
                "parameter": "version",
                "description": "The .NET version.",
                "required": true
            },
            {
                "parameter": "project",
                "description": "The `.csproj` file to update. Suppressing this parameter will run the command in all `.csproj` in the repository/branch.",
                "required": false
            }
        ],
        "dev": true,
        "requiresPullRequestOpen": true
    },
    {
        "command": "cargo clippy",
        "description": "Formats the Rust code using [Cargo Clippy](https://doc.rust-lang.org/clippy/usage.html) (only for **Rust** projects).",
        "requiresPullRequestOpen": true
    },
    {
        "command": "change runner",
        "description": "Changes the [GitHub action runner](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners) in a workflow file (.yml).",
        "parameters": [
            {
                "parameter": "runner",
                "description": "The runner's name.",
                "required": true
            },
            {
                "parameter": "workflow",
                "description": "The workflow filename (with or without the .yml/.yaml extension).",
                "required": true
            },
            {
                "parameter": "jobs",
                "description": "The jobs to apply this command. Suppressing this parameter will run the command in all jobs within the workflow.",
                "required": false
            }
        ],
        "dev": true,
        "requiresPullRequestOpen": true
    },
    {
        "command": "codacy bypass",
        "description": "Bypasses the [Codacy](https://www.codacy.com) analysis for the target commit and/or pull request.",
        "requiresPullRequestOpen": true
    },
    {
        "command": "codacy reanalyze commit",
        "description": "Reanalyzes the [Codacy](https://www.codacy.com) last commit in a pull request.",
        "requiresPullRequestOpen": true
    },
    {
        "command": "codeclimate bypass",
        "description": "Bypasses the [CodeClimate](https://codeclimate.com) analysis for the target commit and/or pull request.",
        "requiresPullRequestOpen": true
    },
    {
        "command": "copy issue",
        "description": "Copies an issue from one repository to another.",
        "parameters": [
            {
                "parameter": "repository",
                "description": "The target repository where the issue will be copied/created.",
                "required": true
            }
        ],
        "dev": true
    },
    {
        "command": "copy labels",
        "description": "Copies the labels from another repository.",
        "parameters": [
            {
                "parameter": "repository",
                "description": "The owner/repository to copy the labels from.",
                "required": true
            }
        ]
    },
    {
        "command": "create labels",
        "description": "Creates the default labels in the repository.",
        "parameters": [
            {
                "parameter": "style",
                "description": "The labels style (icons or text).",
                "required": false
            },
            {
                "parameter": "categories",
                "description": "The labels categories (comma-separated).",
                "required": false
            }
        ]
    },
    {
        "command": "csharpier",
        "description": "Formats the C# code using [CSharpier](https://csharpier.com) (only for **.NET** projects).",
        "requiresPullRequestOpen": true
    },
    {
        "command": "dotnet slnx",
        "description": "Migrates `.sln` files to `.slnx` files using `dotnet sln migrate` (only for **.NET** projects).",
        "requiresPullRequestOpen": true
    },
    {
        "command": "fix csproj",
        "description": "Updates the `.csproj` file with the `packages.config` version of [NuGet packages](https://nuget.org) (only for **.NET Framework** projects).",
        "dev": true,
        "requiresPullRequestOpen": true
    },
    {
        "command": "help",
        "description": "Shows the help message with available commands."
    },
    {
        "command": "npm check updates",
        "description": "Updates dependencies in `package.json` and `package-lock.json` using [npm-check-updates](https://github.com/raineorshine/npm-check-updates) (only for **NPM** projects).",
        "parameters": [
            {
                "parameter": "filter",
                "description": "The packages to filter.",
                "required": false
            }
        ],
        "requiresPullRequestOpen": true
    },
    {
        "command": "npm dist",
        "description": "Generates or regenerates the `dist` files by running `npm run package` (only for **NPM** projects).",
        "requiresPullRequestOpen": true
    },
    {
        "command": "npm lint fix",
        "description": "Fixes linting issues by running `npm run lint -- --fix` (only for **NPM** projects).",
        "requiresPullRequestOpen": true
    },
    {
        "command": "nuget check updates",
        "description": "Checks for NuGet package updates using [dotnet-outdated](https://github.com/dotnet-outdated/dotnet-outdated) (only for **.NET** projects).",
        "parameters": [
            {
                "parameter": "filter",
                "description": "The packages to filter.",
                "required": false
            }
        ],
        "requiresPullRequestOpen": true
    },
    {
        "command": "prettier",
        "description": "Formats the code using [Prettier](https://prettier.io).",
        "requiresPullRequestOpen": true
    },
    {
        "command": "rerun checks",
        "description": "Reruns the checks in the target pull request with a matching conclusion.",
        "requiresPullRequestOpen": true,
        "parameters": [
            {
                "parameter": "conclusion",
                "description": "The conclusion of the checks to rerun (success, failure, neutral, cancelled, timed_out, or action_required).",
                "required": false
            }
        ]
    },
    {
        "command": "rerun workflows",
        "description": "Reruns the workflows (actions) in the target pull request. Only applicable for GitHub Actions.",
        "requiresPullRequestOpen": true,
        "parameters": [
            {
                "parameter": "conclusion",
                "description": "The conclusion of the checks to rerun (success, failure, neutral, cancelled, timed_out, or action_required).",
                "required": false
            }
        ]
    },
    {
        "command": "revert commit",
        "description": "Reverts a commit using its SHA1 in the repository. The revert is committed directly into the PR branch.",
        "parameters": [
            {
                "parameter": "sha1",
                "description": "The SHA1 of the commit to revert.",
                "required": true
            }
        ],
        "requiresPullRequestOpen": true
    },
    {
        "command": "review",
        "description": "Enables review for the target pull request. Useful when the PR submitter wasn't on the watch list or a webhook failed.",
        "requiresPullRequestOpen": true
    },
    {
        "command": "update snapshot",
        "description": "Updates test snapshots by running `npm test -- -u` (only for **Node.js** projects).",
        "requiresPullRequestOpen": true
    }
]